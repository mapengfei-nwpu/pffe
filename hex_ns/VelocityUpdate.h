// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2018.1.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __VELOCITYUPDATE_H
#define __VELOCITYUPDATE_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class velocityupdate_finite_element_0: public ufc::finite_element
{
public:

  velocityupdate_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Q', hexahedron, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 27;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 21:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 22:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 23:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 24:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 25:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 26:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[4] = dof_values[9];
    vertex_values[5] = dof_values[10];
    vertex_values[6] = dof_values[12];
    vertex_values[7] = dof_values[13];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 2 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 3] = coordinate_dofs[6];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 4] = coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 8 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 9] = coordinate_dofs[12];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 10] = coordinate_dofs[15];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 11] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 11 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 11 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 12] = coordinate_dofs[18];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 13] = coordinate_dofs[21];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 17] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 17 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 17 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 20] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 20 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 20 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 21] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 21 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 21 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 22] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 22 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 22 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 23] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 24] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 24 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 24 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 25] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 25 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 25 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 26] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 26 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 26 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[81] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5 };
    std::copy_n(dof_X, 81, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_0();
  }

};


class velocityupdate_finite_element_1: public ufc::finite_element
{
public:

  velocityupdate_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Q', hexahedron, 2), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 81;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 21:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 22:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 23:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 24:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 25:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 26:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 27:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 28:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 29:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 30:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 31:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 32:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 33:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 34:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 35:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 36:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 37:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 38:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 39:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 40:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 41:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 42:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 43:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 44:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 45:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 46:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 47:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 48:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 49:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 50:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 51:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 52:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 53:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 54:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 55:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 56:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 57:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 58:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 59:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 60:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 61:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 62:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 63:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 64:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 65:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 66:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 67:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 68:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 69:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 70:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 71:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 72:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 73:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 74:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 75:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 76:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 77:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 78:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 79:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 80:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[42] = vals[1];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[43] = vals[1];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[44] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[45] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[46] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[47] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[48] = vals[1];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[49] = vals[1];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[50] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[51] = vals[1];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[52] = vals[1];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[53] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[54] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[55] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[56] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[57] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[58] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[59] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[60] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[61] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[62] = vals[2];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[63] = vals[2];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[64] = vals[2];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[65] = vals[2];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[66] = vals[2];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[67] = vals[2];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[68] = vals[2];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[69] = vals[2];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[70] = vals[2];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[71] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[72] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[73] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[74] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[75] = vals[2];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[76] = vals[2];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[77] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[78] = vals[2];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[79] = vals[2];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[80] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[3];
    vertex_values[9] = dof_values[4];
    vertex_values[12] = dof_values[9];
    vertex_values[15] = dof_values[10];
    vertex_values[18] = dof_values[12];
    vertex_values[21] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[27];
    vertex_values[4] = dof_values[28];
    vertex_values[7] = dof_values[30];
    vertex_values[10] = dof_values[31];
    vertex_values[13] = dof_values[36];
    vertex_values[16] = dof_values[37];
    vertex_values[19] = dof_values[39];
    vertex_values[22] = dof_values[40];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[54];
    vertex_values[5] = dof_values[55];
    vertex_values[8] = dof_values[57];
    vertex_values[11] = dof_values[58];
    vertex_values[14] = dof_values[63];
    vertex_values[17] = dof_values[64];
    vertex_values[20] = dof_values[66];
    vertex_values[23] = dof_values[67];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 2 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 3] = coordinate_dofs[6];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 4] = coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 8 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 9] = coordinate_dofs[12];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 10] = coordinate_dofs[15];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 11] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 11 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 11 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 12] = coordinate_dofs[18];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 13] = coordinate_dofs[21];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 17] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 17 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 17 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 20] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 20 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 20 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 21] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 21 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 21 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 22] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 22 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 22 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 23] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 24] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 24 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 24 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 25] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 25 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 25 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 26] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 26 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 26 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 27] = coordinate_dofs[0];
    dof_coordinates[3 * 27 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 27 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 28] = coordinate_dofs[3];
    dof_coordinates[3 * 28 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 28 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 29] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 29 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 29 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 30] = coordinate_dofs[6];
    dof_coordinates[3 * 30 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 30 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 31] = coordinate_dofs[9];
    dof_coordinates[3 * 31 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 31 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 32] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 32 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 32 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 33] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 34 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 34 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 35] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 35 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 35 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 36] = coordinate_dofs[12];
    dof_coordinates[3 * 36 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 36 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 37] = coordinate_dofs[15];
    dof_coordinates[3 * 37 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 37 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 38] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 38 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 38 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 39] = coordinate_dofs[18];
    dof_coordinates[3 * 39 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 39 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 40] = coordinate_dofs[21];
    dof_coordinates[3 * 40 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 40 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 41] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 41 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 41 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 42] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 42 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 42 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 43] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 43 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 43 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 44] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 44 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 44 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 45] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 45 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 45 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 46] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 46 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 46 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 47] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 47 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 47 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 48] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 48 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 48 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 49] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 49 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 49 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 50] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 50 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 50 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 51] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 51 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 51 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 52] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 52 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 52 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 53] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 53 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 53 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 54] = coordinate_dofs[0];
    dof_coordinates[3 * 54 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 54 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 55] = coordinate_dofs[3];
    dof_coordinates[3 * 55 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 55 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 56] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 56 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 56 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 57] = coordinate_dofs[6];
    dof_coordinates[3 * 57 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 57 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 58] = coordinate_dofs[9];
    dof_coordinates[3 * 58 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 58 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 59] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 59 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 59 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 60] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 60 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 60 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 61] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 61 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 61 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 62] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 62 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 62 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 63] = coordinate_dofs[12];
    dof_coordinates[3 * 63 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 63 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 64] = coordinate_dofs[15];
    dof_coordinates[3 * 64 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 64 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 65] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 65 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 65 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 66] = coordinate_dofs[18];
    dof_coordinates[3 * 66 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 66 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 67] = coordinate_dofs[21];
    dof_coordinates[3 * 67 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 67 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 68] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 68 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 68 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 69] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 69 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 69 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 70] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 70 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 70 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 71] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 71 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 71 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 72] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 72 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 72 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 73] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 73 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 73 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 74] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 74 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 74 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 75] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 75 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 75 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 76] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 76 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 76 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 77] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 77 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 77 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 78] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 78 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 78 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 79] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 79 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 79 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 80] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 80 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 80 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[243] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5 };
    std::copy_n(dof_X, 243, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_0();
    case 1:
        return new velocityupdate_finite_element_0();
    case 2:
        return new velocityupdate_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_1();
  }

};


class velocityupdate_finite_element_2: public ufc::finite_element
{
public:

  velocityupdate_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Q', hexahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 8;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[12];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 5] = coordinate_dofs[15];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 6] = coordinate_dofs[18];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 7] = coordinate_dofs[21];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_2();
  }

};


class velocityupdate_finite_element_3: public ufc::finite_element
{
public:

  velocityupdate_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Q', hexahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 24;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 17:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 18:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 19:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[18] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[19] = vals[2];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[20] = vals[2];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[21] = vals[2];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[22] = vals[2];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    vertex_values[12] = dof_values[4];
    vertex_values[15] = dof_values[5];
    vertex_values[18] = dof_values[6];
    vertex_values[21] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[8];
    vertex_values[4] = dof_values[9];
    vertex_values[7] = dof_values[10];
    vertex_values[10] = dof_values[11];
    vertex_values[13] = dof_values[12];
    vertex_values[16] = dof_values[13];
    vertex_values[19] = dof_values[14];
    vertex_values[22] = dof_values[15];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[16];
    vertex_values[5] = dof_values[17];
    vertex_values[8] = dof_values[18];
    vertex_values[11] = dof_values[19];
    vertex_values[14] = dof_values[20];
    vertex_values[17] = dof_values[21];
    vertex_values[20] = dof_values[22];
    vertex_values[23] = dof_values[23];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[12];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 5] = coordinate_dofs[15];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 6] = coordinate_dofs[18];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 7] = coordinate_dofs[21];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 12] = coordinate_dofs[12];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 13] = coordinate_dofs[15];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 14] = coordinate_dofs[18];
    dof_coordinates[3 * 14 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 14 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 15] = coordinate_dofs[21];
    dof_coordinates[3 * 15 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 15 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 16] = coordinate_dofs[0];
    dof_coordinates[3 * 16 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 16 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 17] = coordinate_dofs[3];
    dof_coordinates[3 * 17 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 17 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 18] = coordinate_dofs[6];
    dof_coordinates[3 * 18 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 18 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 19] = coordinate_dofs[9];
    dof_coordinates[3 * 19 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 19 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 20] = coordinate_dofs[12];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 21] = coordinate_dofs[15];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 22] = coordinate_dofs[18];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 23] = coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[72] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0 };
    std::copy_n(dof_X, 72, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_2();
    case 1:
        return new velocityupdate_finite_element_2();
    case 2:
        return new velocityupdate_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_3();
  }

};


class velocityupdate_finite_element_4: public ufc::finite_element
{
public:

  velocityupdate_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', hexahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
    vertex_values[4] = dof_values[0];
    vertex_values[5] = dof_values[0];
    vertex_values[6] = dof_values[0];
    vertex_values[7] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.5, 0.5, 0.5 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_4();
  }

};


class velocityupdate_dofmap_0: public ufc::dofmap
{
public:

  velocityupdate_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Q', hexahedron, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1] + num_global_entities[2] + num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 27;
  }

  std::size_t num_element_dofs() const final override
  {
    return 27;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 1, 1, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 3, 9, 27 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    dofs[9] = offset + entity_indices[0][4];
    dofs[10] = offset + entity_indices[0][5];
    dofs[12] = offset + entity_indices[0][6];
    dofs[13] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    dofs[14] = offset + entity_indices[1][3];
    dofs[6] = offset + entity_indices[1][4];
    dofs[7] = offset + entity_indices[1][5];
    dofs[15] = offset + entity_indices[1][6];
    dofs[16] = offset + entity_indices[1][7];
    dofs[18] = offset + entity_indices[1][8];
    dofs[19] = offset + entity_indices[1][9];
    dofs[21] = offset + entity_indices[1][10];
    dofs[22] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[20] = offset + entity_indices[2][2];
    dofs[23] = offset + entity_indices[2][3];
    dofs[24] = offset + entity_indices[2][4];
    dofs[25] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[26] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 4;
        dofs[5] = 5;
        dofs[6] = 6;
        dofs[7] = 7;
        dofs[8] = 8;
        break;
    case 1:
        dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 15;
        dofs[7] = 16;
        dofs[8] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 9;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 18;
        dofs[7] = 19;
        dofs[8] = 20;
        break;
    case 3:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 21;
        dofs[7] = 22;
        dofs[8] = 23;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
        dofs[4] = 12;
        dofs[5] = 15;
        dofs[6] = 18;
        dofs[7] = 21;
        dofs[8] = 24;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 16;
        dofs[6] = 19;
        dofs[7] = 22;
        dofs[8] = 25;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 3;
            break;
        case 3:
            dofs[0] = 4;
            break;
        case 4:
            dofs[0] = 9;
            break;
        case 5:
            dofs[0] = 10;
            break;
        case 6:
            dofs[0] = 12;
            break;
        case 7:
            dofs[0] = 13;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            break;
        case 1:
            dofs[0] = 5;
            break;
        case 2:
            dofs[0] = 11;
            break;
        case 3:
            dofs[0] = 14;
            break;
        case 4:
            dofs[0] = 6;
            break;
        case 5:
            dofs[0] = 7;
            break;
        case 6:
            dofs[0] = 15;
            break;
        case 7:
            dofs[0] = 16;
            break;
        case 8:
            dofs[0] = 18;
            break;
        case 9:
            dofs[0] = 19;
            break;
        case 10:
            dofs[0] = 21;
            break;
        case 11:
            dofs[0] = 22;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            break;
        case 1:
            dofs[0] = 17;
            break;
        case 2:
            dofs[0] = 20;
            break;
        case 3:
            dofs[0] = 23;
            break;
        case 4:
            dofs[0] = 24;
            break;
        case 5:
            dofs[0] = 25;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 26;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 3;
            break;
        case 3:
            dofs[0] = 4;
            break;
        case 4:
            dofs[0] = 9;
            break;
        case 5:
            dofs[0] = 10;
            break;
        case 6:
            dofs[0] = 12;
            break;
        case 7:
            dofs[0] = 13;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            break;
        case 3:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 14;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            break;
        case 6:
            dofs[0] = 9;
            dofs[1] = 12;
            dofs[2] = 15;
            break;
        case 7:
            dofs[0] = 10;
            dofs[1] = 13;
            dofs[2] = 16;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 9;
            dofs[2] = 18;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 10;
            dofs[2] = 19;
            break;
        case 10:
            dofs[0] = 3;
            dofs[1] = 12;
            dofs[2] = 21;
            break;
        case 11:
            dofs[0] = 4;
            dofs[1] = 13;
            dofs[2] = 22;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            break;
        case 1:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 15;
            dofs[7] = 16;
            dofs[8] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 9;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 18;
            dofs[7] = 19;
            dofs[8] = 20;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 23;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 9;
            dofs[4] = 12;
            dofs[5] = 15;
            dofs[6] = 18;
            dofs[7] = 21;
            dofs[8] = 24;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 16;
            dofs[6] = 19;
            dofs[7] = 22;
            dofs[8] = 25;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_0();
  }

};


class velocityupdate_dofmap_1: public ufc::dofmap
{
public:

  velocityupdate_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Q', hexahedron, 2), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 3 * num_global_entities[1] + 3 * num_global_entities[2] + 3 * num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 81;
  }

  std::size_t num_element_dofs() const final override
  {
    return 81;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 27;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 3, 3, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 9, 27, 81 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    dofs[9] = offset + entity_indices[0][4];
    dofs[10] = offset + entity_indices[0][5];
    dofs[12] = offset + entity_indices[0][6];
    dofs[13] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    dofs[14] = offset + entity_indices[1][3];
    dofs[6] = offset + entity_indices[1][4];
    dofs[7] = offset + entity_indices[1][5];
    dofs[15] = offset + entity_indices[1][6];
    dofs[16] = offset + entity_indices[1][7];
    dofs[18] = offset + entity_indices[1][8];
    dofs[19] = offset + entity_indices[1][9];
    dofs[21] = offset + entity_indices[1][10];
    dofs[22] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[20] = offset + entity_indices[2][2];
    dofs[23] = offset + entity_indices[2][3];
    dofs[24] = offset + entity_indices[2][4];
    dofs[25] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[26] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[27] = offset + entity_indices[0][0];
    dofs[28] = offset + entity_indices[0][1];
    dofs[30] = offset + entity_indices[0][2];
    dofs[31] = offset + entity_indices[0][3];
    dofs[36] = offset + entity_indices[0][4];
    dofs[37] = offset + entity_indices[0][5];
    dofs[39] = offset + entity_indices[0][6];
    dofs[40] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[29] = offset + entity_indices[1][0];
    dofs[32] = offset + entity_indices[1][1];
    dofs[38] = offset + entity_indices[1][2];
    dofs[41] = offset + entity_indices[1][3];
    dofs[33] = offset + entity_indices[1][4];
    dofs[34] = offset + entity_indices[1][5];
    dofs[42] = offset + entity_indices[1][6];
    dofs[43] = offset + entity_indices[1][7];
    dofs[45] = offset + entity_indices[1][8];
    dofs[46] = offset + entity_indices[1][9];
    dofs[48] = offset + entity_indices[1][10];
    dofs[49] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[35] = offset + entity_indices[2][0];
    dofs[44] = offset + entity_indices[2][1];
    dofs[47] = offset + entity_indices[2][2];
    dofs[50] = offset + entity_indices[2][3];
    dofs[51] = offset + entity_indices[2][4];
    dofs[52] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[53] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[54] = offset + entity_indices[0][0];
    dofs[55] = offset + entity_indices[0][1];
    dofs[57] = offset + entity_indices[0][2];
    dofs[58] = offset + entity_indices[0][3];
    dofs[63] = offset + entity_indices[0][4];
    dofs[64] = offset + entity_indices[0][5];
    dofs[66] = offset + entity_indices[0][6];
    dofs[67] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[56] = offset + entity_indices[1][0];
    dofs[59] = offset + entity_indices[1][1];
    dofs[65] = offset + entity_indices[1][2];
    dofs[68] = offset + entity_indices[1][3];
    dofs[60] = offset + entity_indices[1][4];
    dofs[61] = offset + entity_indices[1][5];
    dofs[69] = offset + entity_indices[1][6];
    dofs[70] = offset + entity_indices[1][7];
    dofs[72] = offset + entity_indices[1][8];
    dofs[73] = offset + entity_indices[1][9];
    dofs[75] = offset + entity_indices[1][10];
    dofs[76] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[62] = offset + entity_indices[2][0];
    dofs[71] = offset + entity_indices[2][1];
    dofs[74] = offset + entity_indices[2][2];
    dofs[77] = offset + entity_indices[2][3];
    dofs[78] = offset + entity_indices[2][4];
    dofs[79] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[80] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 4;
        dofs[5] = 5;
        dofs[6] = 6;
        dofs[7] = 7;
        dofs[8] = 8;
        dofs[9] = 27;
        dofs[10] = 28;
        dofs[11] = 29;
        dofs[12] = 30;
        dofs[13] = 31;
        dofs[14] = 32;
        dofs[15] = 33;
        dofs[16] = 34;
        dofs[17] = 35;
        dofs[18] = 54;
        dofs[19] = 55;
        dofs[20] = 56;
        dofs[21] = 57;
        dofs[22] = 58;
        dofs[23] = 59;
        dofs[24] = 60;
        dofs[25] = 61;
        dofs[26] = 62;
        break;
    case 1:
        dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 15;
        dofs[7] = 16;
        dofs[8] = 17;
        dofs[9] = 36;
        dofs[10] = 37;
        dofs[11] = 38;
        dofs[12] = 39;
        dofs[13] = 40;
        dofs[14] = 41;
        dofs[15] = 42;
        dofs[16] = 43;
        dofs[17] = 44;
        dofs[18] = 63;
        dofs[19] = 64;
        dofs[20] = 65;
        dofs[21] = 66;
        dofs[22] = 67;
        dofs[23] = 68;
        dofs[24] = 69;
        dofs[25] = 70;
        dofs[26] = 71;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 9;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 18;
        dofs[7] = 19;
        dofs[8] = 20;
        dofs[9] = 27;
        dofs[10] = 28;
        dofs[11] = 29;
        dofs[12] = 36;
        dofs[13] = 37;
        dofs[14] = 38;
        dofs[15] = 45;
        dofs[16] = 46;
        dofs[17] = 47;
        dofs[18] = 54;
        dofs[19] = 55;
        dofs[20] = 56;
        dofs[21] = 63;
        dofs[22] = 64;
        dofs[23] = 65;
        dofs[24] = 72;
        dofs[25] = 73;
        dofs[26] = 74;
        break;
    case 3:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 21;
        dofs[7] = 22;
        dofs[8] = 23;
        dofs[9] = 30;
        dofs[10] = 31;
        dofs[11] = 32;
        dofs[12] = 39;
        dofs[13] = 40;
        dofs[14] = 41;
        dofs[15] = 48;
        dofs[16] = 49;
        dofs[17] = 50;
        dofs[18] = 57;
        dofs[19] = 58;
        dofs[20] = 59;
        dofs[21] = 66;
        dofs[22] = 67;
        dofs[23] = 68;
        dofs[24] = 75;
        dofs[25] = 76;
        dofs[26] = 77;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
        dofs[4] = 12;
        dofs[5] = 15;
        dofs[6] = 18;
        dofs[7] = 21;
        dofs[8] = 24;
        dofs[9] = 27;
        dofs[10] = 30;
        dofs[11] = 33;
        dofs[12] = 36;
        dofs[13] = 39;
        dofs[14] = 42;
        dofs[15] = 45;
        dofs[16] = 48;
        dofs[17] = 51;
        dofs[18] = 54;
        dofs[19] = 57;
        dofs[20] = 60;
        dofs[21] = 63;
        dofs[22] = 66;
        dofs[23] = 69;
        dofs[24] = 72;
        dofs[25] = 75;
        dofs[26] = 78;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 16;
        dofs[6] = 19;
        dofs[7] = 22;
        dofs[8] = 25;
        dofs[9] = 28;
        dofs[10] = 31;
        dofs[11] = 34;
        dofs[12] = 37;
        dofs[13] = 40;
        dofs[14] = 43;
        dofs[15] = 46;
        dofs[16] = 49;
        dofs[17] = 52;
        dofs[18] = 55;
        dofs[19] = 58;
        dofs[20] = 61;
        dofs[21] = 64;
        dofs[22] = 67;
        dofs[23] = 70;
        dofs[24] = 73;
        dofs[25] = 76;
        dofs[26] = 79;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 27;
            dofs[2] = 54;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 28;
            dofs[2] = 55;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 30;
            dofs[2] = 57;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 31;
            dofs[2] = 58;
            break;
        case 4:
            dofs[0] = 9;
            dofs[1] = 36;
            dofs[2] = 63;
            break;
        case 5:
            dofs[0] = 10;
            dofs[1] = 37;
            dofs[2] = 64;
            break;
        case 6:
            dofs[0] = 12;
            dofs[1] = 39;
            dofs[2] = 66;
            break;
        case 7:
            dofs[0] = 13;
            dofs[1] = 40;
            dofs[2] = 67;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 29;
            dofs[2] = 56;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 32;
            dofs[2] = 59;
            break;
        case 2:
            dofs[0] = 11;
            dofs[1] = 38;
            dofs[2] = 65;
            break;
        case 3:
            dofs[0] = 14;
            dofs[1] = 41;
            dofs[2] = 68;
            break;
        case 4:
            dofs[0] = 6;
            dofs[1] = 33;
            dofs[2] = 60;
            break;
        case 5:
            dofs[0] = 7;
            dofs[1] = 34;
            dofs[2] = 61;
            break;
        case 6:
            dofs[0] = 15;
            dofs[1] = 42;
            dofs[2] = 69;
            break;
        case 7:
            dofs[0] = 16;
            dofs[1] = 43;
            dofs[2] = 70;
            break;
        case 8:
            dofs[0] = 18;
            dofs[1] = 45;
            dofs[2] = 72;
            break;
        case 9:
            dofs[0] = 19;
            dofs[1] = 46;
            dofs[2] = 73;
            break;
        case 10:
            dofs[0] = 21;
            dofs[1] = 48;
            dofs[2] = 75;
            break;
        case 11:
            dofs[0] = 22;
            dofs[1] = 49;
            dofs[2] = 76;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            dofs[1] = 35;
            dofs[2] = 62;
            break;
        case 1:
            dofs[0] = 17;
            dofs[1] = 44;
            dofs[2] = 71;
            break;
        case 2:
            dofs[0] = 20;
            dofs[1] = 47;
            dofs[2] = 74;
            break;
        case 3:
            dofs[0] = 23;
            dofs[1] = 50;
            dofs[2] = 77;
            break;
        case 4:
            dofs[0] = 24;
            dofs[1] = 51;
            dofs[2] = 78;
            break;
        case 5:
            dofs[0] = 25;
            dofs[1] = 52;
            dofs[2] = 79;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 26;
            dofs[1] = 53;
            dofs[2] = 80;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 27;
            dofs[2] = 54;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 28;
            dofs[2] = 55;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 30;
            dofs[2] = 57;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 31;
            dofs[2] = 58;
            break;
        case 4:
            dofs[0] = 9;
            dofs[1] = 36;
            dofs[2] = 63;
            break;
        case 5:
            dofs[0] = 10;
            dofs[1] = 37;
            dofs[2] = 64;
            break;
        case 6:
            dofs[0] = 12;
            dofs[1] = 39;
            dofs[2] = 66;
            break;
        case 7:
            dofs[0] = 13;
            dofs[1] = 40;
            dofs[2] = 67;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 27;
            dofs[4] = 28;
            dofs[5] = 29;
            dofs[6] = 54;
            dofs[7] = 55;
            dofs[8] = 56;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 30;
            dofs[4] = 31;
            dofs[5] = 32;
            dofs[6] = 57;
            dofs[7] = 58;
            dofs[8] = 59;
            break;
        case 2:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 36;
            dofs[4] = 37;
            dofs[5] = 38;
            dofs[6] = 63;
            dofs[7] = 64;
            dofs[8] = 65;
            break;
        case 3:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 14;
            dofs[3] = 39;
            dofs[4] = 40;
            dofs[5] = 41;
            dofs[6] = 66;
            dofs[7] = 67;
            dofs[8] = 68;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 27;
            dofs[4] = 30;
            dofs[5] = 33;
            dofs[6] = 54;
            dofs[7] = 57;
            dofs[8] = 60;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 28;
            dofs[4] = 31;
            dofs[5] = 34;
            dofs[6] = 55;
            dofs[7] = 58;
            dofs[8] = 61;
            break;
        case 6:
            dofs[0] = 9;
            dofs[1] = 12;
            dofs[2] = 15;
            dofs[3] = 36;
            dofs[4] = 39;
            dofs[5] = 42;
            dofs[6] = 63;
            dofs[7] = 66;
            dofs[8] = 69;
            break;
        case 7:
            dofs[0] = 10;
            dofs[1] = 13;
            dofs[2] = 16;
            dofs[3] = 37;
            dofs[4] = 40;
            dofs[5] = 43;
            dofs[6] = 64;
            dofs[7] = 67;
            dofs[8] = 70;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 9;
            dofs[2] = 18;
            dofs[3] = 27;
            dofs[4] = 36;
            dofs[5] = 45;
            dofs[6] = 54;
            dofs[7] = 63;
            dofs[8] = 72;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 10;
            dofs[2] = 19;
            dofs[3] = 28;
            dofs[4] = 37;
            dofs[5] = 46;
            dofs[6] = 55;
            dofs[7] = 64;
            dofs[8] = 73;
            break;
        case 10:
            dofs[0] = 3;
            dofs[1] = 12;
            dofs[2] = 21;
            dofs[3] = 30;
            dofs[4] = 39;
            dofs[5] = 48;
            dofs[6] = 57;
            dofs[7] = 66;
            dofs[8] = 75;
            break;
        case 11:
            dofs[0] = 4;
            dofs[1] = 13;
            dofs[2] = 22;
            dofs[3] = 31;
            dofs[4] = 40;
            dofs[5] = 49;
            dofs[6] = 58;
            dofs[7] = 67;
            dofs[8] = 76;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 27;
            dofs[10] = 28;
            dofs[11] = 29;
            dofs[12] = 30;
            dofs[13] = 31;
            dofs[14] = 32;
            dofs[15] = 33;
            dofs[16] = 34;
            dofs[17] = 35;
            dofs[18] = 54;
            dofs[19] = 55;
            dofs[20] = 56;
            dofs[21] = 57;
            dofs[22] = 58;
            dofs[23] = 59;
            dofs[24] = 60;
            dofs[25] = 61;
            dofs[26] = 62;
            break;
        case 1:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 15;
            dofs[7] = 16;
            dofs[8] = 17;
            dofs[9] = 36;
            dofs[10] = 37;
            dofs[11] = 38;
            dofs[12] = 39;
            dofs[13] = 40;
            dofs[14] = 41;
            dofs[15] = 42;
            dofs[16] = 43;
            dofs[17] = 44;
            dofs[18] = 63;
            dofs[19] = 64;
            dofs[20] = 65;
            dofs[21] = 66;
            dofs[22] = 67;
            dofs[23] = 68;
            dofs[24] = 69;
            dofs[25] = 70;
            dofs[26] = 71;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 9;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 18;
            dofs[7] = 19;
            dofs[8] = 20;
            dofs[9] = 27;
            dofs[10] = 28;
            dofs[11] = 29;
            dofs[12] = 36;
            dofs[13] = 37;
            dofs[14] = 38;
            dofs[15] = 45;
            dofs[16] = 46;
            dofs[17] = 47;
            dofs[18] = 54;
            dofs[19] = 55;
            dofs[20] = 56;
            dofs[21] = 63;
            dofs[22] = 64;
            dofs[23] = 65;
            dofs[24] = 72;
            dofs[25] = 73;
            dofs[26] = 74;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 23;
            dofs[9] = 30;
            dofs[10] = 31;
            dofs[11] = 32;
            dofs[12] = 39;
            dofs[13] = 40;
            dofs[14] = 41;
            dofs[15] = 48;
            dofs[16] = 49;
            dofs[17] = 50;
            dofs[18] = 57;
            dofs[19] = 58;
            dofs[20] = 59;
            dofs[21] = 66;
            dofs[22] = 67;
            dofs[23] = 68;
            dofs[24] = 75;
            dofs[25] = 76;
            dofs[26] = 77;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 9;
            dofs[4] = 12;
            dofs[5] = 15;
            dofs[6] = 18;
            dofs[7] = 21;
            dofs[8] = 24;
            dofs[9] = 27;
            dofs[10] = 30;
            dofs[11] = 33;
            dofs[12] = 36;
            dofs[13] = 39;
            dofs[14] = 42;
            dofs[15] = 45;
            dofs[16] = 48;
            dofs[17] = 51;
            dofs[18] = 54;
            dofs[19] = 57;
            dofs[20] = 60;
            dofs[21] = 63;
            dofs[22] = 66;
            dofs[23] = 69;
            dofs[24] = 72;
            dofs[25] = 75;
            dofs[26] = 78;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 16;
            dofs[6] = 19;
            dofs[7] = 22;
            dofs[8] = 25;
            dofs[9] = 28;
            dofs[10] = 31;
            dofs[11] = 34;
            dofs[12] = 37;
            dofs[13] = 40;
            dofs[14] = 43;
            dofs[15] = 46;
            dofs[16] = 49;
            dofs[17] = 52;
            dofs[18] = 55;
            dofs[19] = 58;
            dofs[20] = 61;
            dofs[21] = 64;
            dofs[22] = 67;
            dofs[23] = 70;
            dofs[24] = 73;
            dofs[25] = 76;
            dofs[26] = 79;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            dofs[35] = 35;
            dofs[36] = 36;
            dofs[37] = 37;
            dofs[38] = 38;
            dofs[39] = 39;
            dofs[40] = 40;
            dofs[41] = 41;
            dofs[42] = 42;
            dofs[43] = 43;
            dofs[44] = 44;
            dofs[45] = 45;
            dofs[46] = 46;
            dofs[47] = 47;
            dofs[48] = 48;
            dofs[49] = 49;
            dofs[50] = 50;
            dofs[51] = 51;
            dofs[52] = 52;
            dofs[53] = 53;
            dofs[54] = 54;
            dofs[55] = 55;
            dofs[56] = 56;
            dofs[57] = 57;
            dofs[58] = 58;
            dofs[59] = 59;
            dofs[60] = 60;
            dofs[61] = 61;
            dofs[62] = 62;
            dofs[63] = 63;
            dofs[64] = 64;
            dofs[65] = 65;
            dofs[66] = 66;
            dofs[67] = 67;
            dofs[68] = 68;
            dofs[69] = 69;
            dofs[70] = 70;
            dofs[71] = 71;
            dofs[72] = 72;
            dofs[73] = 73;
            dofs[74] = 74;
            dofs[75] = 75;
            dofs[76] = 76;
            dofs[77] = 77;
            dofs[78] = 78;
            dofs[79] = 79;
            dofs[80] = 80;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_0();
    case 1:
        return new velocityupdate_dofmap_0();
    case 2:
        return new velocityupdate_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_1();
  }

};


class velocityupdate_dofmap_2: public ufc::dofmap
{
public:

  velocityupdate_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Q', hexahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 8;
  }

  std::size_t num_element_dofs() const final override
  {
    return 8;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 4, 8 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
    dofs[4] = entity_indices[0][4];
    dofs[5] = entity_indices[0][5];
    dofs[6] = entity_indices[0][6];
    dofs[7] = entity_indices[0][7];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        break;
    case 1:
        dofs[0] = 4;
        dofs[1] = 5;
        dofs[2] = 6;
        dofs[3] = 7;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 3:
        dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        case 4:
            dofs[0] = 4;
            break;
        case 5:
            dofs[0] = 5;
            break;
        case 6:
            dofs[0] = 6;
            break;
        case 7:
            dofs[0] = 7;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        case 4:
            dofs[0] = 4;
            break;
        case 5:
            dofs[0] = 5;
            break;
        case 6:
            dofs[0] = 6;
            break;
        case 7:
            dofs[0] = 7;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        case 1:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 4;
            dofs[1] = 5;
            break;
        case 3:
            dofs[0] = 6;
            dofs[1] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 6:
            dofs[0] = 4;
            dofs[1] = 6;
            break;
        case 7:
            dofs[0] = 5;
            dofs[1] = 7;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 4;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 5;
            break;
        case 10:
            dofs[0] = 2;
            dofs[1] = 6;
            break;
        case 11:
            dofs[0] = 3;
            dofs[1] = 7;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 3:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_2();
  }

};


class velocityupdate_dofmap_3: public ufc::dofmap
{
public:

  velocityupdate_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Q', hexahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 24;
  }

  std::size_t num_element_dofs() const final override
  {
    return 24;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 12, 24 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    dofs[4] = offset + entity_indices[0][4];
    dofs[5] = offset + entity_indices[0][5];
    dofs[6] = offset + entity_indices[0][6];
    dofs[7] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    dofs[12] = offset + entity_indices[0][4];
    dofs[13] = offset + entity_indices[0][5];
    dofs[14] = offset + entity_indices[0][6];
    dofs[15] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[16] = offset + entity_indices[0][0];
    dofs[17] = offset + entity_indices[0][1];
    dofs[18] = offset + entity_indices[0][2];
    dofs[19] = offset + entity_indices[0][3];
    dofs[20] = offset + entity_indices[0][4];
    dofs[21] = offset + entity_indices[0][5];
    dofs[22] = offset + entity_indices[0][6];
    dofs[23] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 18;
        dofs[11] = 19;
        break;
    case 1:
        dofs[0] = 4;
        dofs[1] = 5;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 12;
        dofs[5] = 13;
        dofs[6] = 14;
        dofs[7] = 15;
        dofs[8] = 20;
        dofs[9] = 21;
        dofs[10] = 22;
        dofs[11] = 23;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 20;
        dofs[11] = 21;
        break;
    case 3:
        dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 14;
        dofs[7] = 15;
        dofs[8] = 18;
        dofs[9] = 19;
        dofs[10] = 22;
        dofs[11] = 23;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 18;
        dofs[10] = 20;
        dofs[11] = 22;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
        dofs[6] = 13;
        dofs[7] = 15;
        dofs[8] = 17;
        dofs[9] = 19;
        dofs[10] = 21;
        dofs[11] = 23;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 8;
            dofs[2] = 16;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 9;
            dofs[2] = 17;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 10;
            dofs[2] = 18;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 11;
            dofs[2] = 19;
            break;
        case 4:
            dofs[0] = 4;
            dofs[1] = 12;
            dofs[2] = 20;
            break;
        case 5:
            dofs[0] = 5;
            dofs[1] = 13;
            dofs[2] = 21;
            break;
        case 6:
            dofs[0] = 6;
            dofs[1] = 14;
            dofs[2] = 22;
            break;
        case 7:
            dofs[0] = 7;
            dofs[1] = 15;
            dofs[2] = 23;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 8;
            dofs[2] = 16;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 9;
            dofs[2] = 17;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 10;
            dofs[2] = 18;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 11;
            dofs[2] = 19;
            break;
        case 4:
            dofs[0] = 4;
            dofs[1] = 12;
            dofs[2] = 20;
            break;
        case 5:
            dofs[0] = 5;
            dofs[1] = 13;
            dofs[2] = 21;
            break;
        case 6:
            dofs[0] = 6;
            dofs[1] = 14;
            dofs[2] = 22;
            break;
        case 7:
            dofs[0] = 7;
            dofs[1] = 15;
            dofs[2] = 23;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 8;
            dofs[3] = 9;
            dofs[4] = 16;
            dofs[5] = 17;
            break;
        case 1:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            dofs[4] = 18;
            dofs[5] = 19;
            break;
        case 2:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 12;
            dofs[3] = 13;
            dofs[4] = 20;
            dofs[5] = 21;
            break;
        case 3:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 14;
            dofs[3] = 15;
            dofs[4] = 22;
            dofs[5] = 23;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 10;
            dofs[4] = 16;
            dofs[5] = 18;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 9;
            dofs[3] = 11;
            dofs[4] = 17;
            dofs[5] = 19;
            break;
        case 6:
            dofs[0] = 4;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 14;
            dofs[4] = 20;
            dofs[5] = 22;
            break;
        case 7:
            dofs[0] = 5;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 15;
            dofs[4] = 21;
            dofs[5] = 23;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            dofs[3] = 12;
            dofs[4] = 16;
            dofs[5] = 20;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            dofs[3] = 13;
            dofs[4] = 17;
            dofs[5] = 21;
            break;
        case 10:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            dofs[3] = 14;
            dofs[4] = 18;
            dofs[5] = 22;
            break;
        case 11:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            dofs[3] = 15;
            dofs[4] = 19;
            dofs[5] = 23;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 18;
            dofs[11] = 19;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 12;
            dofs[5] = 13;
            dofs[6] = 14;
            dofs[7] = 15;
            dofs[8] = 20;
            dofs[9] = 21;
            dofs[10] = 22;
            dofs[11] = 23;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 12;
            dofs[7] = 13;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 20;
            dofs[11] = 21;
            break;
        case 3:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 14;
            dofs[7] = 15;
            dofs[8] = 18;
            dofs[9] = 19;
            dofs[10] = 22;
            dofs[11] = 23;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            dofs[8] = 16;
            dofs[9] = 18;
            dofs[10] = 20;
            dofs[11] = 22;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            dofs[6] = 13;
            dofs[7] = 15;
            dofs[8] = 17;
            dofs[9] = 19;
            dofs[10] = 21;
            dofs[11] = 23;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_2();
    case 1:
        return new velocityupdate_dofmap_2();
    case 2:
        return new velocityupdate_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_3();
  }

};


class velocityupdate_dofmap_4: public ufc::dofmap
{
public:

  velocityupdate_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', hexahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            break;
        case 7:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            break;
        case 7:
            break;
        case 8:
            break;
        case 9:
            break;
        case 10:
            break;
        case 11:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_4();
  }

};


class velocityupdate_coordinate_mapping_3: public ufc::coordinate_mapping
{
public:

  velocityupdate_coordinate_mapping_3() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~velocityupdate_coordinate_mapping_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Q', hexahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new velocityupdate_coordinate_mapping_3();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new velocityupdate_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new velocityupdate_dofmap_3();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    velocityupdate_finite_element_2 xelement;
    double phi[8];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 8; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[8] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][8] =
        { { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
          { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 8; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 8; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[8] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][8] =
        { { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
          { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 8; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 8; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    velocityupdate_finite_element_2 xelement;
    double dphi[24];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 8; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[8] = { 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 };
    const double dphi_Xm[3][8] =
        { { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
          { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
          { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 8; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 8; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class velocityupdate_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  velocityupdate_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~velocityupdate_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights27[27] = { 0.02143347050754456, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.05486968449931411, 0.0877914951989026, 0.05486968449931411, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.02143347050754456 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE15_C0_D001_Q27[1][27][8] =
        { { { -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831 },
            { -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831 },
            { -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831 },
            { -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417, -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417, -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417, -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999 },
            { -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709 },
            { -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831, -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831, -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831, -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999 },
            { -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417 },
            { -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417 },
            { -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417 } } };
    alignas(32) static const double FE15_C0_D010_Q27[1][27][8] =
        { { { -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999 },
            { -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999 },
            { -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417 },
            { -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417 },
            { -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417 } } };
    alignas(32) static const double FE15_C0_D100_Q27[1][27][8] =
        { { { -0.7872983346207417, -0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.7872983346207417, 0.09999999999999999, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.4436491673103709, 0.4436491673103709, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.09999999999999999, 0.7872983346207417, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.09999999999999999, 0.01270166537925831, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.05635083268962915, 0.05635083268962915, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.01270166537925831, 0.09999999999999999, 0.09999999999999999, 0.7872983346207417 },
            { -0.7872983346207417, -0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.7872983346207417, 0.09999999999999999, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.4436491673103709, 0.4436491673103709, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.09999999999999999, 0.7872983346207417, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.09999999999999999, 0.01270166537925831, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.05635083268962915, 0.05635083268962915, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.01270166537925831, 0.09999999999999999, 0.09999999999999999, 0.7872983346207417 },
            { -0.7872983346207417, -0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.7872983346207417, 0.09999999999999999, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.4436491673103709, 0.4436491673103709, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.09999999999999999, 0.7872983346207417, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.09999999999999999, 0.01270166537925831, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.05635083268962915, 0.05635083268962915, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.01270166537925831, 0.09999999999999999, 0.09999999999999999, 0.7872983346207417 } } };
    alignas(32) static const double FE5_C0_Q27[1][27][27] =
        { { { 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.16 },
            { -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.16 },
            { 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, -0.08729833462074171, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.6872983346207417, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.16 },
            { 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.16 },
            { -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 } } };
    alignas(32) double BF0[27][27] = {};
    for (int iq = 0; iq < 27; ++iq)
    {
        // Quadrature loop body setup (num_points=27)
        // Unstructured varying computations for num_points=27
        const double J_c0 = coordinate_dofs[0] * FE15_C0_D100_Q27[0][iq][0] + coordinate_dofs[3] * FE15_C0_D100_Q27[0][iq][1] + coordinate_dofs[6] * FE15_C0_D100_Q27[0][iq][2] + coordinate_dofs[9] * FE15_C0_D100_Q27[0][iq][3] + coordinate_dofs[12] * FE15_C0_D100_Q27[0][iq][4] + coordinate_dofs[15] * FE15_C0_D100_Q27[0][iq][5] + coordinate_dofs[18] * FE15_C0_D100_Q27[0][iq][6] + coordinate_dofs[21] * FE15_C0_D100_Q27[0][iq][7];
        const double J_c4 = coordinate_dofs[1] * FE15_C0_D010_Q27[0][iq][0] + coordinate_dofs[4] * FE15_C0_D010_Q27[0][iq][1] + coordinate_dofs[7] * FE15_C0_D010_Q27[0][iq][2] + coordinate_dofs[10] * FE15_C0_D010_Q27[0][iq][3] + coordinate_dofs[13] * FE15_C0_D010_Q27[0][iq][4] + coordinate_dofs[16] * FE15_C0_D010_Q27[0][iq][5] + coordinate_dofs[19] * FE15_C0_D010_Q27[0][iq][6] + coordinate_dofs[22] * FE15_C0_D010_Q27[0][iq][7];
        const double J_c8 = coordinate_dofs[2] * FE15_C0_D001_Q27[0][iq][0] + coordinate_dofs[5] * FE15_C0_D001_Q27[0][iq][1] + coordinate_dofs[8] * FE15_C0_D001_Q27[0][iq][2] + coordinate_dofs[11] * FE15_C0_D001_Q27[0][iq][3] + coordinate_dofs[14] * FE15_C0_D001_Q27[0][iq][4] + coordinate_dofs[17] * FE15_C0_D001_Q27[0][iq][5] + coordinate_dofs[20] * FE15_C0_D001_Q27[0][iq][6] + coordinate_dofs[23] * FE15_C0_D001_Q27[0][iq][7];
        const double J_c5 = coordinate_dofs[1] * FE15_C0_D001_Q27[0][iq][0] + coordinate_dofs[4] * FE15_C0_D001_Q27[0][iq][1] + coordinate_dofs[7] * FE15_C0_D001_Q27[0][iq][2] + coordinate_dofs[10] * FE15_C0_D001_Q27[0][iq][3] + coordinate_dofs[13] * FE15_C0_D001_Q27[0][iq][4] + coordinate_dofs[16] * FE15_C0_D001_Q27[0][iq][5] + coordinate_dofs[19] * FE15_C0_D001_Q27[0][iq][6] + coordinate_dofs[22] * FE15_C0_D001_Q27[0][iq][7];
        const double J_c7 = coordinate_dofs[2] * FE15_C0_D010_Q27[0][iq][0] + coordinate_dofs[5] * FE15_C0_D010_Q27[0][iq][1] + coordinate_dofs[8] * FE15_C0_D010_Q27[0][iq][2] + coordinate_dofs[11] * FE15_C0_D010_Q27[0][iq][3] + coordinate_dofs[14] * FE15_C0_D010_Q27[0][iq][4] + coordinate_dofs[17] * FE15_C0_D010_Q27[0][iq][5] + coordinate_dofs[20] * FE15_C0_D010_Q27[0][iq][6] + coordinate_dofs[23] * FE15_C0_D010_Q27[0][iq][7];
        const double J_c1 = coordinate_dofs[0] * FE15_C0_D010_Q27[0][iq][0] + coordinate_dofs[3] * FE15_C0_D010_Q27[0][iq][1] + coordinate_dofs[6] * FE15_C0_D010_Q27[0][iq][2] + coordinate_dofs[9] * FE15_C0_D010_Q27[0][iq][3] + coordinate_dofs[12] * FE15_C0_D010_Q27[0][iq][4] + coordinate_dofs[15] * FE15_C0_D010_Q27[0][iq][5] + coordinate_dofs[18] * FE15_C0_D010_Q27[0][iq][6] + coordinate_dofs[21] * FE15_C0_D010_Q27[0][iq][7];
        const double J_c6 = coordinate_dofs[2] * FE15_C0_D100_Q27[0][iq][0] + coordinate_dofs[5] * FE15_C0_D100_Q27[0][iq][1] + coordinate_dofs[8] * FE15_C0_D100_Q27[0][iq][2] + coordinate_dofs[11] * FE15_C0_D100_Q27[0][iq][3] + coordinate_dofs[14] * FE15_C0_D100_Q27[0][iq][4] + coordinate_dofs[17] * FE15_C0_D100_Q27[0][iq][5] + coordinate_dofs[20] * FE15_C0_D100_Q27[0][iq][6] + coordinate_dofs[23] * FE15_C0_D100_Q27[0][iq][7];
        const double J_c3 = coordinate_dofs[1] * FE15_C0_D100_Q27[0][iq][0] + coordinate_dofs[4] * FE15_C0_D100_Q27[0][iq][1] + coordinate_dofs[7] * FE15_C0_D100_Q27[0][iq][2] + coordinate_dofs[10] * FE15_C0_D100_Q27[0][iq][3] + coordinate_dofs[13] * FE15_C0_D100_Q27[0][iq][4] + coordinate_dofs[16] * FE15_C0_D100_Q27[0][iq][5] + coordinate_dofs[19] * FE15_C0_D100_Q27[0][iq][6] + coordinate_dofs[22] * FE15_C0_D100_Q27[0][iq][7];
        const double J_c2 = coordinate_dofs[0] * FE15_C0_D001_Q27[0][iq][0] + coordinate_dofs[3] * FE15_C0_D001_Q27[0][iq][1] + coordinate_dofs[6] * FE15_C0_D001_Q27[0][iq][2] + coordinate_dofs[9] * FE15_C0_D001_Q27[0][iq][3] + coordinate_dofs[12] * FE15_C0_D001_Q27[0][iq][4] + coordinate_dofs[15] * FE15_C0_D001_Q27[0][iq][5] + coordinate_dofs[18] * FE15_C0_D001_Q27[0][iq][6] + coordinate_dofs[21] * FE15_C0_D001_Q27[0][iq][7];
        alignas(32) double sv27[15];
        sv27[0] = J_c4 * J_c8;
        sv27[1] = J_c5 * J_c7;
        sv27[2] = sv27[0] + -1 * sv27[1];
        sv27[3] = J_c0 * sv27[2];
        sv27[4] = J_c5 * J_c6;
        sv27[5] = J_c3 * J_c8;
        sv27[6] = sv27[4] + -1 * sv27[5];
        sv27[7] = J_c1 * sv27[6];
        sv27[8] = sv27[3] + sv27[7];
        sv27[9] = J_c3 * J_c7;
        sv27[10] = J_c4 * J_c6;
        sv27[11] = sv27[9] + -1 * sv27[10];
        sv27[12] = J_c2 * sv27[11];
        sv27[13] = sv27[8] + sv27[12];
        sv27[14] = std::abs(sv27[13]);
        const double fw0 = sv27[14] * weights27[iq];
        alignas(32) double TF0[27];
        for (int i = 0; i < 27; ++i)
            TF0[i] = fw0 * FE5_C0_Q27[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF0[i][j] += TF0[i] * FE5_C0_Q27[0][iq][j];
    }
    std::fill(A, A + 6561, 0.0);
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 27; ++j)
            A[81 * i + j] += BF0[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 27; ++j)
            A[81 * (i + 27) + (j + 27)] += BF0[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 27; ++j)
            A[81 * (i + 54) + (j + 54)] += BF0[i][j];
  }

};


class velocityupdate_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  velocityupdate_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~velocityupdate_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights27[27] = { 0.02143347050754456, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.05486968449931411, 0.0877914951989026, 0.05486968449931411, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.05486968449931411, 0.0342935528120713, 0.02143347050754456, 0.0342935528120713, 0.02143347050754456 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE15_C0_D001_Q27[1][27][8] =
        { { { -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831 },
            { -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831 },
            { -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831 },
            { -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417, -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417, -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417, -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999 },
            { -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915 },
            { -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709 },
            { -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831, -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831, -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999 },
            { -0.09999999999999999, 0.09999999999999999, -0.01270166537925831, 0.01270166537925831, -0.7872983346207417, 0.7872983346207417, -0.09999999999999999, 0.09999999999999999 },
            { -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709 },
            { -0.05635083268962915, 0.05635083268962915, -0.05635083268962915, 0.05635083268962915, -0.4436491673103709, 0.4436491673103709, -0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417 },
            { -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417 },
            { -0.01270166537925831, 0.01270166537925831, -0.09999999999999999, 0.09999999999999999, -0.09999999999999999, 0.09999999999999999, -0.7872983346207417, 0.7872983346207417 } } };
    alignas(32) static const double FE15_C0_D010_Q27[1][27][8] =
        { { { -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999 },
            { -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999 },
            { -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417 },
            { -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417 },
            { -0.09999999999999999, -0.01270166537925831, 0.09999999999999999, 0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, 0.05635083268962915, 0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, 0.01270166537925831, 0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.09999999999999999, 0.7872983346207417 } } };
    alignas(32) static const double FE15_C0_D100_Q27[1][27][8] =
        { { { -0.7872983346207417, -0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.7872983346207417, 0.09999999999999999, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.4436491673103709, 0.4436491673103709, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.09999999999999999, 0.7872983346207417, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.09999999999999999, 0.01270166537925831, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.05635083268962915, 0.05635083268962915, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.01270166537925831, 0.09999999999999999, 0.09999999999999999, 0.7872983346207417 },
            { -0.7872983346207417, -0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.7872983346207417, 0.09999999999999999, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.4436491673103709, 0.4436491673103709, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.09999999999999999, 0.7872983346207417, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.09999999999999999, 0.01270166537925831, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.05635083268962915, 0.05635083268962915, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.01270166537925831, 0.09999999999999999, 0.09999999999999999, 0.7872983346207417 },
            { -0.7872983346207417, -0.09999999999999999, -0.09999999999999999, -0.01270166537925831, 0.7872983346207417, 0.09999999999999999, 0.09999999999999999, 0.01270166537925831 },
            { -0.4436491673103709, -0.4436491673103709, -0.05635083268962915, -0.05635083268962915, 0.4436491673103709, 0.4436491673103709, 0.05635083268962915, 0.05635083268962915 },
            { -0.09999999999999999, -0.7872983346207417, -0.01270166537925831, -0.09999999999999999, 0.09999999999999999, 0.7872983346207417, 0.01270166537925831, 0.09999999999999999 },
            { -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.05635083268962915, -0.4436491673103709, -0.05635083268962915, -0.4436491673103709, 0.05635083268962915, 0.4436491673103709, 0.05635083268962915, 0.4436491673103709 },
            { -0.09999999999999999, -0.01270166537925831, -0.7872983346207417, -0.09999999999999999, 0.09999999999999999, 0.01270166537925831, 0.7872983346207417, 0.09999999999999999 },
            { -0.05635083268962915, -0.05635083268962915, -0.4436491673103709, -0.4436491673103709, 0.05635083268962915, 0.05635083268962915, 0.4436491673103709, 0.4436491673103709 },
            { -0.01270166537925831, -0.09999999999999999, -0.09999999999999999, -0.7872983346207417, 0.01270166537925831, 0.09999999999999999, 0.09999999999999999, 0.7872983346207417 } } };
    alignas(32) static const double FE5_C0_Q27[1][27][27] =
        { { { 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.16 },
            { -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.16 },
            { 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, -0.08729833462074171, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.6872983346207417, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.16 },
            { 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.007620999227554991, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4723790007724451, -0.06000000000000002, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2749193338482967, -0.03491933384829669, 0.16 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08729833462074171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6872983346207417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007620999227554991, -0.06000000000000002, -0.03491933384829669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06000000000000002, 0.4723790007724451, 0.2749193338482967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03491933384829669, 0.2749193338482967, 0.16 },
            { 0.005237900077244504, -0.0006653005407115097, 0.003048399691021997, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, -0.04123790007724452, 0.005237900077244504, -0.02400000000000001, 0.3246653005407116, -0.04123790007724452, 0.1889516003089781, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, -0.02400000000000001, 0.003048399691021997, -0.01396773353931868, 0.188951600308978, -0.02400000000000001, 0.1099677335393187, 0.1099677335393187, -0.01396773353931868, 0.06400000000000002 },
            { 0.0, 0.0, 0.007620999227554991, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, -0.06000000000000002, 0.0, 0.0, 0.4723790007724451, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, -0.03491933384829669, 0.0, 0.0, 0.2749193338482967, 0.0, 0.0, 0.16 },
            { -0.0006653005407115097, 0.005237900077244504, 0.003048399691021997, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, 0.005237900077244504, -0.04123790007724452, -0.02400000000000001, -0.04123790007724452, 0.3246653005407116, 0.1889516003089781, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, 0.003048399691021997, -0.02400000000000001, -0.01396773353931868, -0.02400000000000001, 0.188951600308978, 0.1099677335393187, -0.01396773353931868, 0.1099677335393187, 0.06400000000000002 } } };
    alignas(32) double BF0[27] = {};
    alignas(32) double BF1[27] = {};
    alignas(32) double BF2[27] = {};
    for (int iq = 0; iq < 27; ++iq)
    {
        // Quadrature loop body setup (num_points=27)
        // Unstructured varying computations for num_points=27
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w1_c0 += w[1][ic] * FE5_C0_Q27[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w1_c1 += w[1][ic + 27] * FE5_C0_Q27[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w1_c2 += w[1][ic + 54] * FE5_C0_Q27[0][iq][ic];
        double w2_d0 = 0.0;
        for (int ic = 0; ic < 8; ++ic)
            w2_d0 += w[2][ic] * FE15_C0_D100_Q27[0][iq][ic];
        const double J_c4 = coordinate_dofs[1] * FE15_C0_D010_Q27[0][iq][0] + coordinate_dofs[4] * FE15_C0_D010_Q27[0][iq][1] + coordinate_dofs[7] * FE15_C0_D010_Q27[0][iq][2] + coordinate_dofs[10] * FE15_C0_D010_Q27[0][iq][3] + coordinate_dofs[13] * FE15_C0_D010_Q27[0][iq][4] + coordinate_dofs[16] * FE15_C0_D010_Q27[0][iq][5] + coordinate_dofs[19] * FE15_C0_D010_Q27[0][iq][6] + coordinate_dofs[22] * FE15_C0_D010_Q27[0][iq][7];
        const double J_c8 = coordinate_dofs[2] * FE15_C0_D001_Q27[0][iq][0] + coordinate_dofs[5] * FE15_C0_D001_Q27[0][iq][1] + coordinate_dofs[8] * FE15_C0_D001_Q27[0][iq][2] + coordinate_dofs[11] * FE15_C0_D001_Q27[0][iq][3] + coordinate_dofs[14] * FE15_C0_D001_Q27[0][iq][4] + coordinate_dofs[17] * FE15_C0_D001_Q27[0][iq][5] + coordinate_dofs[20] * FE15_C0_D001_Q27[0][iq][6] + coordinate_dofs[23] * FE15_C0_D001_Q27[0][iq][7];
        const double J_c5 = coordinate_dofs[1] * FE15_C0_D001_Q27[0][iq][0] + coordinate_dofs[4] * FE15_C0_D001_Q27[0][iq][1] + coordinate_dofs[7] * FE15_C0_D001_Q27[0][iq][2] + coordinate_dofs[10] * FE15_C0_D001_Q27[0][iq][3] + coordinate_dofs[13] * FE15_C0_D001_Q27[0][iq][4] + coordinate_dofs[16] * FE15_C0_D001_Q27[0][iq][5] + coordinate_dofs[19] * FE15_C0_D001_Q27[0][iq][6] + coordinate_dofs[22] * FE15_C0_D001_Q27[0][iq][7];
        const double J_c7 = coordinate_dofs[2] * FE15_C0_D010_Q27[0][iq][0] + coordinate_dofs[5] * FE15_C0_D010_Q27[0][iq][1] + coordinate_dofs[8] * FE15_C0_D010_Q27[0][iq][2] + coordinate_dofs[11] * FE15_C0_D010_Q27[0][iq][3] + coordinate_dofs[14] * FE15_C0_D010_Q27[0][iq][4] + coordinate_dofs[17] * FE15_C0_D010_Q27[0][iq][5] + coordinate_dofs[20] * FE15_C0_D010_Q27[0][iq][6] + coordinate_dofs[23] * FE15_C0_D010_Q27[0][iq][7];
        const double J_c0 = coordinate_dofs[0] * FE15_C0_D100_Q27[0][iq][0] + coordinate_dofs[3] * FE15_C0_D100_Q27[0][iq][1] + coordinate_dofs[6] * FE15_C0_D100_Q27[0][iq][2] + coordinate_dofs[9] * FE15_C0_D100_Q27[0][iq][3] + coordinate_dofs[12] * FE15_C0_D100_Q27[0][iq][4] + coordinate_dofs[15] * FE15_C0_D100_Q27[0][iq][5] + coordinate_dofs[18] * FE15_C0_D100_Q27[0][iq][6] + coordinate_dofs[21] * FE15_C0_D100_Q27[0][iq][7];
        const double J_c1 = coordinate_dofs[0] * FE15_C0_D010_Q27[0][iq][0] + coordinate_dofs[3] * FE15_C0_D010_Q27[0][iq][1] + coordinate_dofs[6] * FE15_C0_D010_Q27[0][iq][2] + coordinate_dofs[9] * FE15_C0_D010_Q27[0][iq][3] + coordinate_dofs[12] * FE15_C0_D010_Q27[0][iq][4] + coordinate_dofs[15] * FE15_C0_D010_Q27[0][iq][5] + coordinate_dofs[18] * FE15_C0_D010_Q27[0][iq][6] + coordinate_dofs[21] * FE15_C0_D010_Q27[0][iq][7];
        const double J_c6 = coordinate_dofs[2] * FE15_C0_D100_Q27[0][iq][0] + coordinate_dofs[5] * FE15_C0_D100_Q27[0][iq][1] + coordinate_dofs[8] * FE15_C0_D100_Q27[0][iq][2] + coordinate_dofs[11] * FE15_C0_D100_Q27[0][iq][3] + coordinate_dofs[14] * FE15_C0_D100_Q27[0][iq][4] + coordinate_dofs[17] * FE15_C0_D100_Q27[0][iq][5] + coordinate_dofs[20] * FE15_C0_D100_Q27[0][iq][6] + coordinate_dofs[23] * FE15_C0_D100_Q27[0][iq][7];
        const double J_c3 = coordinate_dofs[1] * FE15_C0_D100_Q27[0][iq][0] + coordinate_dofs[4] * FE15_C0_D100_Q27[0][iq][1] + coordinate_dofs[7] * FE15_C0_D100_Q27[0][iq][2] + coordinate_dofs[10] * FE15_C0_D100_Q27[0][iq][3] + coordinate_dofs[13] * FE15_C0_D100_Q27[0][iq][4] + coordinate_dofs[16] * FE15_C0_D100_Q27[0][iq][5] + coordinate_dofs[19] * FE15_C0_D100_Q27[0][iq][6] + coordinate_dofs[22] * FE15_C0_D100_Q27[0][iq][7];
        const double J_c2 = coordinate_dofs[0] * FE15_C0_D001_Q27[0][iq][0] + coordinate_dofs[3] * FE15_C0_D001_Q27[0][iq][1] + coordinate_dofs[6] * FE15_C0_D001_Q27[0][iq][2] + coordinate_dofs[9] * FE15_C0_D001_Q27[0][iq][3] + coordinate_dofs[12] * FE15_C0_D001_Q27[0][iq][4] + coordinate_dofs[15] * FE15_C0_D001_Q27[0][iq][5] + coordinate_dofs[18] * FE15_C0_D001_Q27[0][iq][6] + coordinate_dofs[21] * FE15_C0_D001_Q27[0][iq][7];
        double w2_d1 = 0.0;
        for (int ic = 0; ic < 8; ++ic)
            w2_d1 += w[2][ic] * FE15_C0_D010_Q27[0][iq][ic];
        double w2_d2 = 0.0;
        for (int ic = 0; ic < 8; ++ic)
            w2_d2 += w[2][ic] * FE15_C0_D001_Q27[0][iq][ic];
        alignas(32) double sv27[68];
        sv27[0] = J_c4 * J_c8;
        sv27[1] = J_c5 * J_c7;
        sv27[2] = sv27[0] + -1 * sv27[1];
        sv27[3] = J_c0 * sv27[2];
        sv27[4] = J_c5 * J_c6;
        sv27[5] = J_c3 * J_c8;
        sv27[6] = sv27[4] + -1 * sv27[5];
        sv27[7] = J_c1 * sv27[6];
        sv27[8] = sv27[3] + sv27[7];
        sv27[9] = J_c3 * J_c7;
        sv27[10] = J_c4 * J_c6;
        sv27[11] = sv27[9] + -1 * sv27[10];
        sv27[12] = J_c2 * sv27[11];
        sv27[13] = sv27[8] + sv27[12];
        sv27[14] = sv27[2] / sv27[13];
        sv27[15] = w2_d0 * sv27[14];
        sv27[16] = J_c3 * (-1 * J_c8);
        sv27[17] = sv27[4] + sv27[16];
        sv27[18] = sv27[17] / sv27[13];
        sv27[19] = w2_d1 * sv27[18];
        sv27[20] = sv27[15] + sv27[19];
        sv27[21] = sv27[11] / sv27[13];
        sv27[22] = w2_d2 * sv27[21];
        sv27[23] = sv27[20] + sv27[22];
        sv27[24] = J_c2 * J_c7;
        sv27[25] = J_c8 * (-1 * J_c1);
        sv27[26] = sv27[24] + sv27[25];
        sv27[27] = sv27[26] / sv27[13];
        sv27[28] = w2_d0 * sv27[27];
        sv27[29] = J_c0 * J_c8;
        sv27[30] = J_c6 * (-1 * J_c2);
        sv27[31] = sv27[29] + sv27[30];
        sv27[32] = sv27[31] / sv27[13];
        sv27[33] = w2_d1 * sv27[32];
        sv27[34] = sv27[28] + sv27[33];
        sv27[35] = J_c1 * J_c6;
        sv27[36] = J_c0 * J_c7;
        sv27[37] = sv27[35] + -1 * sv27[36];
        sv27[38] = sv27[37] / sv27[13];
        sv27[39] = w2_d2 * sv27[38];
        sv27[40] = sv27[34] + sv27[39];
        sv27[41] = J_c1 * J_c5;
        sv27[42] = J_c2 * J_c4;
        sv27[43] = sv27[41] + -1 * sv27[42];
        sv27[44] = sv27[43] / sv27[13];
        sv27[45] = w2_d0 * sv27[44];
        sv27[46] = J_c2 * J_c3;
        sv27[47] = J_c0 * J_c5;
        sv27[48] = sv27[46] + -1 * sv27[47];
        sv27[49] = sv27[48] / sv27[13];
        sv27[50] = w2_d1 * sv27[49];
        sv27[51] = sv27[45] + sv27[50];
        sv27[52] = J_c0 * J_c4;
        sv27[53] = J_c1 * J_c3;
        sv27[54] = sv27[52] + -1 * sv27[53];
        sv27[55] = sv27[54] / sv27[13];
        sv27[56] = w2_d2 * sv27[55];
        sv27[57] = sv27[51] + sv27[56];
        sv27[58] = sv27[23] * w[0][0];
        sv27[59] = sv27[40] * w[0][0];
        sv27[60] = sv27[57] * w[0][0];
        sv27[61] = w1_c0 + -1 * sv27[58];
        sv27[62] = w1_c1 + -1 * sv27[59];
        sv27[63] = w1_c2 + -1 * sv27[60];
        sv27[64] = std::abs(sv27[13]);
        sv27[65] = sv27[61] * sv27[64];
        sv27[66] = sv27[62] * sv27[64];
        sv27[67] = sv27[63] * sv27[64];
        const double fw0 = sv27[65] * weights27[iq];
        for (int i = 0; i < 27; ++i)
            BF0[i] += fw0 * FE5_C0_Q27[0][iq][i];
        const double fw1 = sv27[66] * weights27[iq];
        for (int i = 0; i < 27; ++i)
            BF1[i] += fw1 * FE5_C0_Q27[0][iq][i];
        const double fw2 = sv27[67] * weights27[iq];
        for (int i = 0; i < 27; ++i)
            BF2[i] += fw2 * FE5_C0_Q27[0][iq][i];
    }
    std::fill(A, A + 81, 0.0);
    for (int i = 0; i < 27; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 27; ++i)
        A[i + 27] += BF1[i];
    for (int i = 0; i < 27; ++i)
        A[i + 54] += BF2[i];
  }

};


class velocityupdate_form_0: public ufc::form
{
public:

  velocityupdate_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~velocityupdate_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3e74bdae9d285cad0f2348309451cd44a7aa459d2383c32498d4b237f0ca4f47261bec2d3e0aaebf62f867108d4f7ef682b7c32c479942b47835c02718fe7d40";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new velocityupdate_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new velocityupdate_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new velocityupdate_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_1();
    case 1:
        return new velocityupdate_finite_element_1();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_1();
    case 1:
        return new velocityupdate_dofmap_1();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new velocityupdate_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class velocityupdate_form_1: public ufc::form
{
public:

  velocityupdate_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~velocityupdate_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "90dc1c7329888fc4548cf59eded89d2c4c020d8f65ae58e7a8f969033b678317b93e0ab347070347926b60f4018029dbc1e080a37fdb1abb98d92f3431246488";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new velocityupdate_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new velocityupdate_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new velocityupdate_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_1();
    case 1:
        return new velocityupdate_finite_element_4();
    case 2:
        return new velocityupdate_finite_element_1();
    case 3:
        return new velocityupdate_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_1();
    case 1:
        return new velocityupdate_dofmap_4();
    case 2:
        return new velocityupdate_dofmap_1();
    case 3:
        return new velocityupdate_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new velocityupdate_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace VelocityUpdate
{

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const velocityupdate_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_L_FunctionSpace_1;

typedef CoefficientSpace_u1 Form_L_FunctionSpace_2;

typedef CoefficientSpace_p1 Form_L_FunctionSpace_3;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const velocityupdate_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> p1):
    dolfin::Form(1, 3), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    _function_spaces[0] = V0;

    this->k = k;
    this->u1 = u1;
    this->p1 = p1;

    _ufc_form = std::make_shared<const velocityupdate_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u1")
      return 1;
    else if (name == "p1")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u1";
    case 2:
      return "p1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_p1;

  // Coefficients
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner u1;
  dolfin::CoefficientAssigner p1;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> p1):
    dolfin::MultiMeshForm(V0), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;
    this->u1 = u1;
    this->p1 = p1;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u1")
      return 1;
    else if (name == "p1")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u1";
    case 2:
      return "p1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_p1;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner u1;
  dolfin::MultiMeshCoefficientAssigner p1;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
